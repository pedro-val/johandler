//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    pub client_id: i32,
    pub process_id: i32,
    pub open: bool,
    #[sea_orm(column_type = "Float")]
    pub payout: f32,
    #[sea_orm(column_type = "Float")]
    pub fee: f32,
    #[sea_orm(column_type = "Float", nullable)]
    pub partner_fee: Option<f32>,
    pub seller_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::clients::Entity",
        from = "Column::ClientId",
        to = "super::clients::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Clients,
    #[sea_orm(has_many = "super::order_fees::Entity")]
    OrderFees,
    #[sea_orm(has_many = "super::payments::Entity")]
    Payments,
    #[sea_orm(
        belongs_to = "super::processes::Entity",
        from = "Column::ProcessId",
        to = "super::processes::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Processes,
    #[sea_orm(
        belongs_to = "super::sellers::Entity",
        from = "Column::SellerId",
        to = "super::sellers::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Sellers,
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::order_fees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderFees.def()
    }
}

impl Related<super::payments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payments.def()
    }
}

impl Related<super::processes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Processes.def()
    }
}

impl Related<super::sellers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sellers.def()
    }
}
