//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "processes_fees")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    pub process_id: i32,
    pub fee_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fees::Entity",
        from = "Column::FeeId",
        to = "super::fees::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Fees,
    #[sea_orm(
        belongs_to = "super::processes::Entity",
        from = "Column::ProcessId",
        to = "super::processes::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Processes,
}

impl Related<super::fees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fees.def()
    }
}

impl Related<super::processes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Processes.def()
    }
}
